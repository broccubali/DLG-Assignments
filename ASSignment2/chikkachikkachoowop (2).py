# -*- coding: utf-8 -*-
"""chikkachikkachoowop.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MCO3P8sb5SZWC1ZVsJ6YjiuoHGt2_UZ9
"""

pip install torch_geometric

import pandas as pd
import numpy as np
import json
import matplotlib.pyplot as plt
import torch
from torch_geometric.nn import HypergraphConv
import networkx as nx

train_data = pd.read_csv('train_stock_data.csv')
train_data['Date'] = pd.to_datetime(train_data['Date'], format='%Y-%m-%d')
train_data.sort_values(['Ticker', 'Date'], inplace=True)

validation_data = pd.read_csv('validation_stock_data.csv')
with open('hyperedges.json', 'r') as f:
    hyperedges = json.load(f)

with open('blind_test_cases.json', 'r') as f:
    test_cases = json.load(f)

print(f"Training data shape: {train_data.shape}")
print(f"Validation data shape: {validation_data.shape}")
print(f"Number of hyperedges: {len(hyperedges)}")
print(f"Number of test cases: {len(test_cases)}")

# ogay let's look at it some more
print("Training data columns:")
print(train_data.columns)  # whadowehave

print("Sample of training data:")
train_data.head(3)

print("Hyperedges structure:")
hyperedges

print(type(hyperedges))

print("Available tickers in training data:", train_data['Ticker'].unique())

print("Test case example:")
test_cases[0]

stock_series = {}
tickers = train_data['Ticker'].unique()
for ticker in tickers:
    mask = train_data['Ticker'] == ticker
    stock_df = train_data[mask][['Date', 'Open', 'High', 'Low', 'Close', 'Volume']]
    stock_series[ticker] = stock_df.set_index('Date')

aapl = stock_series['AAPL'] # can change to toher stocks- use the ypergraph dict
plt.figure(figsize=(12, 6))
plt.plot(aapl.index, aapl['Close'], label='Close Price') # change to open and volume and other finance bro
plt.title('AAPL Close Price (2019-2022)')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

stocks = ['AAPL', 'AMZN', 'BA', 'BAC', 'C', 'CAT', 'CVX', 'DUK', 'GOOGL', 'JNJ', 'JPM' ,'KO',
 'MRK', 'MSFT', 'PFE', 'PG', 'T', 'VZ', 'WMT', 'XOM']

# tiker to index
ticker_to_idx = {ticker: idx for idx, ticker in enumerate(sorted(tickers))}
print("Ticker to index mapping:", ticker_to_idx)

hyperedges.values

with open('hyperedges.json', 'r') as f:
    hyperedges = json.load(f)

#convert hyperedge to indices
hyperedge_indices = []
for he_name, tickers in hyperedges.items():
    indices = [ticker_to_idx[t] for t in tickers]
    print(f"Hyperedge '{he_name}': {tickers} -> {indices}")
    hyperedge_indices.append(indices)

# incidence matrix
num_nodes = len(all_tickers)
num_hyperedges = len(hyperedge_indices)
H = torch.zeros(num_nodes, num_hyperedges)
for he_idx, nodes in enumerate(hyperedge_indices):
    H[nodes, he_idx] = 1

# Create incidence matrix
num_nodes = len(stocks)
num_hyperedges = len(hyperedge_indices)
H = torch.zeros(num_nodes, num_hyperedges)
for he_idx, nodes in enumerate(hyperedge_indices):
    for node in nodes:
        H[node, he_idx] = 1

# now we prepaer for time series forecasting
window_size = 30 # can change later
features = ['Open', 'High', 'Low', 'Close', 'Volume']

# sliding windoes for each stokc
sequences, targets = {}, {}
for ticker in tickers:
    data = stock_series[ticker][features].values
    X, y = [], []
    for i in range(len(data) - window_size):
        X.append(data[i:i+window_size])
        y.append(data[i+window_size])
    sequences[ticker] = np.array(X)
    targets[ticker] = np.array(y)

# combine all the sequences
all_X = np.concatenate(list(sequences.values()), axis=0)
all_y = np.concatenate(list(targets.values()), axis=0)

all_X

# lessee tech stock correlations
tech_stocks = ['AAPL', 'GOOGL', 'MSFT', 'AMZN']
plt.figure(figsize=(12, 6))
for stock in tech_stocks:
    close_prices = stock_series[stock]['Close'].resample('M').mean()
    plt.plot(close_prices, label=stock)
plt.title('Tech Hyperedge: Monthly Close Prices')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

